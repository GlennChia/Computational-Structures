.subckt alu ALUFN[5:0] A[31:0] B[31:0] alu[31:0] 

Xadder32 ALUFN[0] A[31:0] B[31:0] s[31:0] z v n adder32
Xcompare32 ALUFN[2:1] z v n cmp[31:0] compare32
Xboole32 ALUFN[3:0] A[31:0] B[31:0] boole[31:0] boole32
Xshift32 ALUFN[1:0] A[31:0] B[4:0] shift[31:0] shift32

Xalu_32 ALUFN[5]#32 ALUFN[4]#32 s[31:0] shift[31:0] boole[31:0] cmp[31:0] alu[31:0] mux4

.ends

.subckt adder32 ALUFN[0] A[31:0] B[31:0] s[31:0] z v n

* Compute the modified B inputs 
Xxor2_XB ALUFN[0]#32 B[31:0] XB[31:0] xor2

* Code for the first adder 
Xfirst A[0] XB[0] ALUFN[0] S[0] C[0] FA

* Code for remainder
Xadder_remain A[31:1] XB[31:1] C[30:0] S[31:1] C[31:1] FA

* Code for Z
// Declare the first 8 or gates
Xor_8 S[7:0] S[15:8] S[23:16] S[31:24] out[7:0] or4
Xor_4 out[7:4] out[3:0] out2[1:0] or4
Xnor2_z out2[0] out2[1] Z nor2

* Code for V
// Invert those that need inverting 
Xinv_s31 s[31] is inverter
Xinv_A31 A[31] iA inverter
Xinv_XB31 XB[31] iXB inverter

Xand3_1 A[31] XB[31] is D and3
Xand3_2 iA iXB s[31] E and3
Xor2_v D E V or2

* Code for N
.connect S[31] N 

.ends


.subckt compare32 ALUFN[2:1] z v n cmp[31:0]

Xgnd cmp[31:1] constant0
Xxor N V xor_result xor2
Xor Z xor_result or_result or2
Xmux_comp ALUFN[2] ALUFN[1] 0 xor_result z or_result cmp[0] mux4

.ends

.subckt boole32 ALUFN[3:0] A[31:0] B[31:0] boole[31:0]

Xbool_32 A[31:0] B[31:0] ALUFN[0]#32 ALUFN[1]#32 ALUFN[2]#32 ALUFN[3]#32 boole[31:0] mux4

.ends

.subckt shift32 ALUFN[1:0] A[31:0] B[4:0] shift[31:0]

* Code to shift left
Xleft1 B[4]#32 A[31:0] A[15:0] 0#16 WL[31:0] mux2
Xleft2 B[3]#32 WL[31:0] WL[23:0] 0#8 XL[31:0] mux2
Xleft3 B[2]#32 XL[31:0] XL[27:0] 0#4 YL[31:0] mux2
Xleft4 B[1]#32 YL[31:0] YL[29:0] 0#2 ZL[31:0] mux2
Xleft5 B[0]#32 ZL[31:0] ZL[30:0] 0#1 SL[31:0] mux2

* Code to shift right 
Xright1 B[4]#32 A[31:0] 0#16 A[31:16] WR[31:0] mux2
Xright2 B[3]#32 WR[31:0] 0#8 WR[31:8] XR[31:0] mux2
Xright3 B[2]#32 XR[31:0] 0#4 XR[31:4] YR[31:0] mux2
Xright4 B[1]#32 YR[31:0] 0#2 YR[31:2] ZR[31:0] mux2
Xright5 B[0]#32 ZR[31:0] 0#1 ZR[31:1] SR[31:0] mux2

* Code to shift right arithmatically 
XrightA1 B[4]#32 A[31:0] A[31]#16 A[31:16] WRA[31:0] mux2
XrightA2 B[3]#32 WRA[31:0] A[31]#8 WRA[31:8] XRA[31:0] mux2
XrightA3 B[2]#32 XRA[31:0] A[31]#4 XRA[31:4] YRA[31:0] mux2
XrightA4 B[1]#32 YRA[31:0] A[31]#2 YRA[31:2] ZRA[31:0] mux2
XrightA5 B[0]#32 ZRA[31:0] A[31]#1 ZRA[31:1] SRA[31:0] mux2

* Code to control the shift 
Xcontrol ALUFN[1]#32 ALUFN[0]#32 SL[31:0] 0#32 SR[31:0] SRA[31:0] shift[31:0] mux4

.ends
