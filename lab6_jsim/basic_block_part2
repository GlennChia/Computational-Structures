.include "C:\Users\Glenn Chia\Desktop\TERM4\50.002 Computation Structures\Software Tools\50002\nominal.jsim"
.include "C:\Users\Glenn Chia\Desktop\TERM4\50.002 Computation Structures\Software Tools\50002\stdcell.jsim"
.include "C:\Users\Glenn Chia\Desktop\TERM4\50.002 Computation Structures\Software Tools\50002\lab6checkoff.jsim"

// From jsim documentation 
.subckt knex a b
.connect a b 
.ends

.subckt beta clk reset irq ia[31:0] id[31:0] ma[31:0] moe mrd[31:0] wr mwd[31:0]

*Part 2A4 and 2D (Partial)
* Code for asel
// Set bit 31 of the BT to 0. Dont use.connect, produces an error
// Code for the asel mux. If 0 choose radata[31:0]. If 1 choose bt[31:0].
Xasel asel#32 radata[31:0] 0 bt[30:0] a[31:0] mux2 

* Part 2B. Code for WASEL
// XP is register 30 which is 11110
.connect vdd xp[4:1]
.connect 0 xp[0]
Xwasel wasel#5 id[25:21] xp[4:0] wa[4:0] mux2

* Part 2D. Get the Z with nor32
Xor_8 radata[7:0] radata[15:8] radata[23:16] radata[31:24] out[7:0] or4
Xor_4 out[7:4] out[3:0] out2[1:0] or4
Xnor2_z out2[0] out2[1] z nor2

* Part 2E. WDSEL Mux
* only need for 01 (ALU output) and 10 (Read data from main memory) and 00 which is inc[31:0]
// ma[31:0] is the output of the ALU 
// mrd[31:0] is the read data from the data memory 
// mwd[31:0] is the write data into the main memory 
Xwdsel wdsel[0]#32 wdsel[1]#32 inc[31:0] ma[31:0] mrd[31:0] 0#32  wdata[31:0] mux4

* Part 2(F) IRQ Implementation
// Interrupts occur when the ia[31] which is PC31 == 0 and irq == 1
// OR gate produces a '0' only if both inputs are 0. 
// Invert the IRQ to get 0. Then OR PC31 and inv_irq to get a logic 0
Xinv_irq irq irq_inv inverter
Xnor2 irq_inv ia[31] cont or2  // if IRQ == 1 and ia[31] == 0 ten this will give logic 0 

// Code for the modified signals. if cont == 0 trigger interrupt. if not, then let the signals from the control logic be the legit signal
// Set PCSEL to 4. 4 == 100. 
Xinterrupt_PCSEL cont#3 vdd 0#2 pcsel_ctl[2:0] pcsel[2:0] mux2
// Set WASEL to 1. 1 == 1
Xinterrupt_WASEL cont vdd wasel_ctl wasel mux2
// Set WERF to 1. 1=1
Xinterrupt_WERF cont vdd werf_ctl werf mux2
// Set WDSEL to 0. 0 == 0
Xinterrupt_WDSEL cont#2 0#2 wdsel_ctl[1:0] wdsel[1:0] mux2
// Set WR to 0. 0==0 
Xinterrupt_WR cont 0 wr_ctl wr mux2


* From part 1 (Circuit calls and bselmux)

* sign extend the low order 16 bits of the instruction. This instruction is the D on the Instruction Memory 
// We are sign extending the lower 16 bits of id[31:0]
// Connect the lower 16 bits to each other since they are the same 
Xlow16bsel inst[15:0] id[15:0] knex
// Connect the upper 16 bits to the 16th bit from id[31:0]
.connect inst[31:16] id[15]  // This connects all the nodes together 
// Mux for bsel
Xbsel bsel#32 mwd[31:0] inst[31:0] b[31:0] mux2

* Calling all the subcircuits 
// radata[31:0] passed into the PC to be modified later by the jt code
// id[31:0] will be modified in the PC file as well
// .subckt pc clk reset pcsel[2:0] jt[31:0] id[31:0] ia[31:0] inc[31:0] bt[31:0]
Xpc clk reset pcsel[2:0] radata[31:0] id[31:0] ia[31:0] inc[31:0] bt[31:0] pc

// Add the results from wasel mux wa[4:0]
Xregfile clk werf ra2sel id[20:16] id[15:11] id[25:21] wdata[31:0] radata[31:0] mwd[31:0] wa[4:0] regfile

// Add z, asel, pcsel_ctl[2:0], wasel_ctl
Xctl reset z id[31:26] ra2sel bsel alufn[5:0] wdsel_ctl[1:0] werf_ctl moe wr_ctl asel pcsel_ctl[2:0] wasel_ctl ctl

// Edited from part 1 to remove z v and n since z has name clash
Xalu alufn[5:0] a[31:0] b[31:0] ma[31:0] alu

.ends
